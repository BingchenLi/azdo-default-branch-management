# azure-pipelines.yml
trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: template task pat

steps:
- script: |
    #!/bin/bash
    echo "Setting branch permissions for branch: main"
    descriptor="Microsoft.TeamFoundation.Identity;S-1-9-1551374245-1194147708-4156559681-2630020361-3763428198-0-0-0-0-3"

    
    source $(System.DefaultWorkingDirectory)/utils.sh
    echo "Project Collection Valid Users Descriptor: $descriptor"
    hex_value_branch=$(convert_to_hex "main")
    branch_token="repoV2/bdf163da-f1ac-48d7-920f-bd3d2882eec8/e9facd23-cd44-4e63-9e6b-361e1e827c04/refs/heads/6d00610069006e00"
    echo "Branch token: $branch_token"


    set_permission(){
      local token="$1"
      local descriptor="$2"
      deny_value=0

      # Get the expected deny bit value for the permission
      for key in "${!permission_bits[@]}"; do
        deny_value=$((deny_value + permission_bits[$key]))
      done
      echo "Sum of permission_bits values: $deny_value"

      new_acl=$(jq -n \
      --arg token "$token" \
      --arg descriptor "$descriptor" \
      --argjson deny "$deny_value" \
      '{
        "token": $token,
        "merge": true,
        "accessControlEntries": [
          {
            "descriptor": $descriptor,
            "allow": 0,
            "deny": $deny,
            "extendedInfo": {}
          }
        ]
      }')

      # Update ACLs
      # set_permission_url="$BASE_URL/_apis/accesscontrolentries/$SECURITY_NAMESPACE_ID?$API_VERSION"
      # response=$(make_request "$(TEMPLATE_PAT)" "$set_permission_url" "POST" "$new_acl")
      # echo "$response" | jq .
      # # Check if the update was successful
      # if echo "$response" | jq -e '.value' > /dev/null; then
      #   echo "Successfully denied required permission for Project Collection Valid Users on branch $BRANCH."
      # else
      #   echo "Failed to update ACLs. Response: $response"
      #   exit 1
      # fi

      echo "Checking again..."
      # local permissions_url="$BASE_URL/_apis/accesscontrollists/$SECURITY_NAMESPACE_ID?token=$token&$API_VERSION"
      # permission_url="$BASE_URL/_apis/accesscontrollists/$SECURITY_NAMESPACE_ID?token=$token&descriptor=$descriptor&includeExtendedInfo=true&$API_VERSION"
      permission_url="$BASE_URL/_apis/accesscontrollists/$SECURITY_NAMESPACE_ID?token=$token&descriptor=$descriptor&includeExtendedInfo=true&$API_VERSION"
      echo "Permission URL: $permission_url"
      permissions_response=$(make_request "$(TEMPLATE_PAT)" "$permissions_url")
      # permissions_response=$(make_request "$(TEMPLATE_PAT)" "$permission_url")
      echo "$permissions_response" | jq .
    }

    set_permission "$branch_token" "$descriptor"





      # #!/bin/bash
      # source $(System.DefaultWorkingDirectory)/utils.sh
      # DefaultBranch="main"
      # # RepoId="b09c6706-fe70-4d2f-ab16-82e610fcea6f"
      # echo "Checking branch review policies for branch: $DefaultBranch"

      # permission_check_status="Success"

      

      # # Function to get Project Collection Valid Users group descriptor
      # get_project_collection_valid_users_descriptor() {
          
      #     local groups_url="https://vssps.dev.azure.com/$ORG_NAME/_apis/identities?searchFilter=General&filterValue=Project%20Collection%20Valid%20Users&queryMembership=None&api-version=7.2-preview.1"
      #     local groups_response=$(make_request "$(TEMPLATE_PAT)" "$groups_url")
      #     local descriptor=$(echo "$groups_response" | jq -r '.value[] | select(.providerDisplayName == "[libingchen716]\\Project Collection Valid Users") | .descriptor')
      #     if [ -z "$descriptor" ]; then
      #         echo "Error: Failed to get Project Collection Valid Users group descriptor"
      #         exit 1
      #     fi
          
      #     echo "$descriptor"
      # }

      # deny_value=0

      # # Get the expected deny bit value for the permission
      # for key in "${!permission_bits[@]}"; do
      #   deny_value=$((deny_value + permission_bits[$key]))
      # done
      # echo "Sum of permission_bits values: $deny_value"
      
      # # Function to check permission from an entry
      # check_permission() {
      #     local entry="$1"
      #     # local permission="$2"
      #     local bit_position="$2"
      #     local level="$3"  # "branch", "repo", or "project"
      #     local descriptor="$4"
          
      #     if [ -z "$entry" ] || [ "$entry" = "null" ]; then
      #         echo "No explicit permission entry found at $level level."

      #     else
      #       if [ -z "$(echo "$entry" | jq -r '.extendedInfo')" ]; then
      #         echo "No explicit effective permission found at $level level."
      #         permission_check_status="Failed"

      #       else
      #         deny=$(echo "$entry" | jq -r '.extendedInfo.effectiveDeny')
      #         entry_descriptor=$(echo "$entry" | jq -r '.descriptor')
      #         echo "For $entry_descriptor"
      #         echo "Deny permissions at $level level: $deny"

      #         # Check if permission is denied
      #         if (( deny & bit_position )); then
      #           echo "Required permissions are denied in entry at $level level."
      #           # permission_status[$permission]="Success"
      #         else
      #           echo "Required permissions are NOT denied in entry at $level level."
      #           permission_check_status="Failed"
      #         fi
      #       fi
      #     fi
      # }

      # # Query effective ACL for a branch + group
      # check_branch_effective_permission_at_level() {
      #   local level="$1"
      #   local token="$2"
      #   local bit_position="$3"
      #   local descriptor="$4"

      #   s_url="$BASE_URL/_apis/accesscontrollists/$NAMESPACE_ID?token=$token&descriptor=$descriptor&includeExtendedInfo=true&api-version=7.1-preview.1"

      #   permissions_response=$(make_request "$(TEMPLATE_PAT)" "$s_url")
      #   # echo "$permissions_response"
      #   echo "$permissions_response" | jq .

      #   local count=$(echo "$permissions_response" | jq -r '.count')
      #   if [ "$count" -eq 0 ]; then
      #       echo "No explicit permissions set at $level level."
      #   else
      #       aces=$(echo "$permissions_response" | jq -c '.value[0].acesDictionary[]')
      #       for ace_entry in $aces; do
      #           check_permission "$ace_entry" "$bit_position" "$level" "$descriptor"
      #       done
      #   fi
      # }

      # # Branch level
      # NAMESPACE_ID="2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87"
      # PROJECT_ID="bdf163da-f1ac-48d7-920f-bd3d2882eec8"
      # REPO_ID="e9facd23-cd44-4e63-9e6b-361e1e827c04"
      # hex_value_branch=$(convert_to_hex "$DefaultBranch")
      # branch_token="repoV2/$PROJECT_ID/$REPO_ID/refs/heads/$hex_value_branch"
      # descriptor=$(get_project_collection_valid_users_descriptor)
      # check_branch_effective_permission_at_level "branch" "$branch_token" "$deny_value" "$descriptor"
      echo "Permission check status: $permission_check_status"




         